// Code generated by mockery v2.20.0. DO NOT EDIT.

package mailer

import (
	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	mock "github.com/stretchr/testify/mock"
)

// MockMailer is an autogenerated mock type for the Mailer type
type MockMailer struct {
	mock.Mock
}

type MockMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailer) EXPECT() *MockMailer_Expecter {
	return &MockMailer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: recipient, templateID, data
func (_m *MockMailer) Send(recipient *mail.Email, templateID string, data map[string]interface{}) error {
	ret := _m.Called(recipient, templateID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mail.Email, string, map[string]interface{}) error); ok {
		r0 = rf(recipient, templateID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - recipient *mail.Email
//   - templateID string
//   - data map[string]interface{}
func (_e *MockMailer_Expecter) Send(recipient interface{}, templateID interface{}, data interface{}) *MockMailer_Send_Call {
	return &MockMailer_Send_Call{Call: _e.mock.On("Send", recipient, templateID, data)}
}

func (_c *MockMailer_Send_Call) Run(run func(recipient *mail.Email, templateID string, data map[string]interface{})) *MockMailer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mail.Email), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockMailer_Send_Call) Return(_a0 error) *MockMailer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailer_Send_Call) RunAndReturn(run func(*mail.Email, string, map[string]interface{}) error) *MockMailer_Send_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMailer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMailer creates a new instance of MockMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMailer(t mockConstructorTestingTNewMockMailer) *MockMailer {
	mock := &MockMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
